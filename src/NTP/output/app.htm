<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\output\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\output\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Oct 17 10:05:01 2019
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; do_ntp_client &rArr; get_seconds_from_ntp_server &rArr; calc_date_time &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">RTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">RTC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[15]">DMA_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[16]">DUALTIMER0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[17]">DUALTIMER1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[23]">EXTI_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[f]">I2C0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[10]">I2C1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[11]">PORT0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[12]">PORT1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[13]">PORT2_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[14]">PORT3_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[18]">PWM0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[19]">PWM1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1a]">PWM2_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1b]">PWM3_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1c]">PWM4_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1d]">PWM5_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1e]">PWM6_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1f]">PWM7_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[20]">RTC_Handler</a> from startup_w7500x.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_w7500x.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[a]">SSP0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[b]">SSP1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_w7500x.o(.text) referenced from startup_w7500x.o(.text)
 <LI><a href="#[c]">UART0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[d]">UART1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[e]">UART2_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[22]">WZTOE_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[28]">__main</a> from __main.o(!!!main) referenced from startup_w7500x.o(.text)
 <LI><a href="#[27]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[26]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[af]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; do_ntp_client &rArr; get_seconds_from_ntp_server &rArr; calc_date_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[91]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; do_ntp_client &rArr; get_seconds_from_ntp_server &rArr; calc_date_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w7500_ip
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpclient_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[26]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fputc &rArr; S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>fgetc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartGetc
</UL>

<P><STRONG><a name="[8e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[46]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3f]"></a>set_w7500_ip</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, ip_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = set_w7500_ip &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>phy_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ip_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = phy_init &rArr; mdio_init &rArr; phy_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>delay_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, time_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, time_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4b]"></a>delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_s
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[4e]"></a>delay_s</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[c8]"></a>delay_soft_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, time_delay.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w7500x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PORT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PORT1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PORT2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PORT3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DUALTIMER0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DUALTIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PWM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PWM4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWM5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWM6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>WZTOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>GPIO_DeInit</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>GPIO_Init</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
</UL>

<P><STRONG><a name="[51]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>GPIO_SetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, w7500x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_ResetBits</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_WriteBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>GPIO_INT_Enable_Bits</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>GPIO_INT_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>GPIO_INT_Polarity_Bits</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_INT_Polarity</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>GPIO_INT_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>GPIO_Read_INTstatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>PAD_AFConfig</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PAD_AFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
</UL>

<P><STRONG><a name="[50]"></a>GPIO_Configuration</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[54]"></a>GPIO_INT_Configuration</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Polarity_Bits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[d4]"></a>UART_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>UART_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>UART_Init</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[62]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>

<P><STRONG><a name="[d6]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>UART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>UART_GetRecvStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>UART_ClearRecvStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>UART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>UART_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>S_UART_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>S_UART_SetBaud</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_UART_SetBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_Init
</UL>

<P><STRONG><a name="[3d]"></a>S_UART_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = S_UART_Init &rArr; S_UART_SetBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SetBaud
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>S_UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPuts
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>

<P><STRONG><a name="[66]"></a>S_UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartGetc
</UL>

<P><STRONG><a name="[df]"></a>S_UART_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>S_UART_SetCTRL</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>S_UART_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>S_UART_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>S_UART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>UartPutc</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPuts
</UL>

<P><STRONG><a name="[63]"></a>UartPuts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>

<P><STRONG><a name="[e4]"></a>UartGetc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>S_UartPutc</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[65]"></a>S_UartPuts</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SendData
</UL>

<P><STRONG><a name="[45]"></a>S_UartGetc</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[48]"></a>WIZCHIP_READ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w7500_ip
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
</UL>

<P><STRONG><a name="[47]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w7500_ip
</UL>

<P><STRONG><a name="[6a]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[68]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[67]"></a>wiz_send_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[69]"></a>wiz_recv_data</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[74]"></a>wiz_recv_ignore</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wiz_recv_ignore
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[e5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_w7500x.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>GetSystemClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_w7500x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SetBaud
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, system_w7500x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_w7500x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_w7500x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_w7500x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6b]"></a>close</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = close
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[6c]"></a>socket</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = socket &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
</UL>

<P><STRONG><a name="[6d]"></a>listen</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[6e]"></a>connect</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[6f]"></a>disconnect</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[70]"></a>send</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[71]"></a>recv</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[72]"></a>sendto</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
</UL>

<P><STRONG><a name="[73]"></a>recvfrom</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
</UL>

<P><STRONG><a name="[75]"></a>ctlsocket</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[76]"></a>setsockopt</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[77]"></a>getsockopt</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[78]"></a>idle_MDIO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = idle_MDIO &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[7b]"></a>input_MDIO</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = input_MDIO &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[7d]"></a>turnaround_MDIO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = turnaround_MDIO &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[7e]"></a>output_MDIO</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = output_MDIO &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[7f]"></a>mdio_read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mdio_read &rArr; output_MDIO &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link
</UL>

<P><STRONG><a name="[4c]"></a>link</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = link &rArr; mdio_read &rArr; output_MDIO &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[80]"></a>mdio_write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, w7500x_miim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_link
</UL>

<P><STRONG><a name="[81]"></a>set_link</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, w7500x_miim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
</UL>

<P><STRONG><a name="[82]"></a>phy_id</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = phy_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
</UL>

<P><STRONG><a name="[4a]"></a>mdio_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mdio_init &rArr; phy_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[83]"></a>calc_date_time</STRONG> (Thumb, 642 bytes, Stack size 88 bytes, ntp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = calc_date_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_from_ntp_server
</UL>

<P><STRONG><a name="[85]"></a>get_seconds_from_ntp_server</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, ntp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_seconds_from_ntp_server &rArr; calc_date_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_date_time
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
</UL>

<P><STRONG><a name="[41]"></a>ntpclient_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ntp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntpclient_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>do_ntp_client</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, ntp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = do_ntp_client &rArr; get_seconds_from_ntp_server &rArr; calc_date_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_from_ntp_server
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>change_datetime_to_seconds</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, ntp.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_date_time
</UL>

<P><STRONG><a name="[e9]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w7500_ip
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ntp_client
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[30]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ea]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[eb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ee]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[92]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[96]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[95]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[94]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[97]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[99]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[9b]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9e]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9f]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f2]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a0]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[9d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a1]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[a3]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, time_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[56]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
</UL>

<P><STRONG><a name="[98]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[93]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a2]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[9c]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[27]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
